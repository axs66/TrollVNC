name: Build TrollVNC Deb Packages

on:
  push:
    branches: [release]
  workflow_dispatch:
    inputs:
      desktop_name:
        type: string
        description: Desktop name shown to clients
        required: false
        default: TrollVNC
      port:
        type: string
        description: VNC TCP port (1024–65535; default 5901)
        required: false
        default: "5901"
      view_only:
        type: boolean
        description: Global view-only (ignore input)
        required: false
        default: false
      scale:
        type: string
        description: Output scale (0.1–1.0)
        required: false
        default: "1.0"

env:
  FINALPACKAGE: 1
  HOMEBREW_NO_AUTO_UPDATE: 1
  HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK: 1

jobs:
  build:
    runs-on: macos-14

    strategy:
      matrix:
        # 只保留生成deb包的scheme，移除bootstrap（它生成tipa）
        scheme: ["default", "rootless", "roothide"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          brew install xcbeautify ldid-procursus p7zip make

      - name: Checkout roothide/theos
        uses: actions/checkout@v4
        with:
          repository: roothide/theos
          path: theos-roothide
          submodules: recursive

      - name: Install iOS SDKs
        run: |
          export THEOS=$GITHUB_WORKSPACE/theos-roothide
          cd theos-roothide
          ./bin/install-sdk iPhoneOS16.5
          ./bin/install-sdk iPhoneOS14.5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "16.2"

      - name: Build package (${{ matrix.scheme }})
        run: |
          source devkit/${{ matrix.scheme }}.sh
          FINALPACKAGE=1 gmake clean package

      - name: Prepare artifacts
        run: |
          # 只创建deb包的目录
          mkdir -p artifacts/packages-${{ matrix.scheme }}

          # 只复制deb包
          if [ -d "packages" ]; then
            find packages -name "*.deb" -exec cp {} artifacts/packages-${{ matrix.scheme }}/ \;
          fi

      - name: Upload package artifacts
        uses: actions/upload-artifact@v4
        with:
          name: packages-${{ matrix.scheme }}
          path: artifacts/packages-${{ matrix.scheme }}
          if-no-files-found: error

  release:
    if: github.event_name == 'push' && github.ref == 'refs/heads/release'
    needs: build
    runs-on: macos-14

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all package artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: packages-*
          path: release-packages
          merge-multiple: true

      - name: Create release tag
        id: tag
        run: |
          PACKAGE_VERSION=$(grep 'PACKAGE_VERSION' Makefile | cut -d' ' -f4)
          TAG_NAME="v$PACKAGE_VERSION"
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.tag_name }}
          name: Release ${{ steps.tag.outputs.tag_name }}
          body: |
            Automated build from release branch

            This release contains DEB packages built with:
            - Default scheme
            - Rootless scheme
            - RootHide scheme

            Built on: ${{ github.sha }}
          files: release-packages/**/*.deb
          draft: false
          prerelease: false
